package kk.practice.javaStackQueue;import java.io.Serializable;/** * @author kangkai on 2018/11/13. */public class SeqStack<T> implements Stack<T>,Serializable {    private static final long serialVersionUID = -5413303117698554397L;    /**     * 栈顶指针,-1代表空栈     */    private int top=-1;    /**     * 容量大小默认为10     */    private int capacity=10;    /**     * 存放元素的数组     */    private T[] array;    private int size;    public SeqStack(int capacity){        array = (T[]) new Object[capacity];    }    public SeqStack(){        array= (T[]) new Object[this.capacity];    }    @Override    public boolean isEmpty() {        return this.top == -1;    }    /**     * 添加元素,从栈顶(数组尾部)插入     */    @Override    public void push(T data) {        if (size == array.length) {            ensureCapacity(size);        }        this.array[++top] = data;        size++;    }    /**     * 获取栈顶元素的值,不删除     */    @Override    public T peek() {        if (top == -1) {            System.out.println("无元素");            return null;        }        return this.array[top];    }    /**     * 从栈顶(顺序表尾部)删除     */    @Override    public T pop() {        if (top == -1) {            System.out.println("无元素");            return null;        }        T temp = array[top--] = null;        size--;        return temp;    }    private void ensureCapacity(int capacity) {        if (capacity < size) {            return;        }        int newLength = capacity*2 + 1;        T[] newArray = (T[]) new Object[newLength];        for(int i = 0; i <= top; i++) {            newArray[i] = this.array[i];        }    }}