package kk.practice.多线程.存钱取钱;/** * @author kangkai on 2018/11/23. */public class AccountOperator implements Runnable {    private Account account;    public AccountOperator(Account account) {        this.account = account;    }    @Override    public void run() {        synchronized (account) { //其他操作 account 的线程需要等待            account.deposit(100);            account.withdraw(50);            //查看余额            System.out.println(Thread.currentThread().getName() + "操作后余额:" + account.getBalance());        }    }    public static void main(String[] args) throws Exception{        Account account = new Account("xiao ming",0f);        AccountOperator accountOperator = new AccountOperator(account);        for (int i = 0; i < 4; i++) {            Thread thread = new Thread(accountOperator,i+"thread");            thread.start();        }    }}class Account {    String name;    float amount;    public Account(String name, float amount) {        this.name = name;        this.amount = amount;    }    public float getBalance () {       return this.amount;    }    //存钱    public void deposit(float amt) {        amount += amt;        try {            System.out.println(Thread.currentThread().getName() +"线程 正在存钱");            Thread.sleep(100);        } catch (InterruptedException e) {            e.printStackTrace();        }    }    //取钱    public void withdraw(float amt) {        amount -= amt;        try {            System.out.println(Thread.currentThread().getName() +"线程 正在取钱");            Thread.sleep(100);        } catch (InterruptedException e) {            e.printStackTrace();        }    }}