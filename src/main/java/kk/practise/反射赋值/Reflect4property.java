package kk.practise.反射赋值;import java.lang.reflect.Field;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;import java.util.ArrayList;import java.util.Arrays;import java.util.List;import java.util.logging.Logger;/** * @author kangkai on 2018/4/3. */public class Reflect4property {    private static Logger logger = Logger.getLogger("Reflect4property");    public static void main(String[] args) {        List<String> result = getPropertyName(kk.practise.反射赋值.UserPushSave.UserInfo.class);        List<String> setList = new ArrayList<>();        result.forEach(s ->            setList.add(getProperty("set",s))        );        List<String> getList = new ArrayList<>();        result.forEach(s ->            getList.add(getProperty("get",s))        );        UserPushSave.UserInfo userInfo = new UserPushSave.UserInfo();        List<String> valueList = new ArrayList<>(Arrays.asList("v01","v02","v03","v04"));        //set        for (int i = 0; i < setList.size(); i++) {            try {                    Method m = userInfo.getClass().getDeclaredMethod(setList.get(i),String.class);                try {                    m.invoke(userInfo,valueList.get(i));                } catch (IllegalAccessException e) {                    e.printStackTrace();                } catch (InvocationTargetException e) {                    e.printStackTrace();                }            } catch (NoSuchMethodException e) {                e.printStackTrace();            }        }        //get        for (int i = 0; i < getList.size(); i++) {            try {                Method m = userInfo.getClass().getMethod(getList.get(i));                try {                    String value = (String)m.invoke(userInfo);                    System.out.println(value);                } catch (IllegalAccessException e) {                    e.printStackTrace();                } catch (InvocationTargetException e) {                    e.printStackTrace();                }            } catch (NoSuchMethodException e) {                e.printStackTrace();            }        }    }    /**    * Description:根据类名 获取其所有属性名    * @param clazz    * @return stringList    */    private static List<String> getPropertyName(Class<?> clazz) {        Field[] fds = {};        fds = clazz.getDeclaredFields();        List<String> stringList = new ArrayList<>();        for(Field f : fds) {            stringList.add(f.getName());        }        return stringList;    }    /**     * Description:根据属性名 获取其set方法     * @param propertyName     * @return stringList     */    private static String getProperty(String getOrSet,String propertyName) {        StringBuilder sb = new StringBuilder("");        //构造set方法：加set 属性名首字母大写        //第一个字母 大写        String first = propertyName.substring(0,1).toUpperCase();        //其他        String others = propertyName.substring(1);        sb.append(getOrSet).append(first).append(others);        String propertySet = sb.toString();        return propertySet;    }}